package main

import "fmt"

var count int

// Node represents the componets of a binary search tree
type Node struct{
	data int
	key int
	Left *Node
	Right *Node
}

// Insert will add a node to the tree
// the key to add should not be already in the tree
func (n *Node) Insert (k int){
	if n.key < k {
		//move right
		if n.Right == nil{
			fmt.Printf("->")
			n.Right = &Node{key: k}
		} else{
			n.Right.Insert(k)
		}
	} else if n.key > k {
		//move Left
		if n.Left == nil{
			n.Left = &Node{key: k}
		} else {
			n.Left.Insert(k)
		}
	}
}

// Search will take in a key value
// and RETRUN true if there is a node with that value
func (n *Node) Search (k int) bool{

	count++

	if n == nil{
		return false 
	}

	if n.key < k{
		//move right
		return n.Right.Search(k)
	} else if n.key > k {
		//move left
		return n.Left.Search(k)
	}

    return true
}

func main(){
	tree := &Node{}
	
	tree.Insert(52)
	tree.Insert(203)
	tree.Insert(19)
	tree.Insert(76)
	tree.Insert(150)
	tree.Insert(310)
	tree.Insert(7)
	tree.Insert(24)
	tree.Insert(88)
	tree.Insert(276)

	fmt.Println(tree.Search(276))
	fmt.Println(count)
}
